package edu.miracosta.cs134.Model;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.support.annotation.Nullable;
import android.util.Log;

import java.util.ArrayList;
import java.util.List;

public class DBHelper extends SQLiteOpenHelper {

    public static final String TAG = DBHelper.class.getSimpleName();

    // STEP 1) Define all database info in constants
    public static final String DATABASE_NAME = "ToDo2Day";
    public static final String DATABASE_TABLE = "Tasks";
    public static final String FIELD_PRIMARY_KEY = "_id";
    public static final String FIELD_DESCRIPTION = "description";
    public static final String FIELD_IS_DONE = "is_done";

    public DBHelper(@Nullable Context context) {
        super(context, DATABASE_NAME, null, 1);
    }

    @Override
    public void onCreate(SQLiteDatabase db) {

        // Create all database tables (Tasks)
        // 1) Determine whether to read or write the database (CREATE = write)
        // Open a writable connection to the ToDo2Day database
        // db = getWritableDatabase();

        // Execute the create table statement

        String sql = String.format("CREATE TABLE IF NOT EXISTS %s(%s INTEGER PRIMARY KEY, %s TEXT, %s INTEGER)",
                DATABASE_TABLE, FIELD_PRIMARY_KEY, FIELD_DESCRIPTION, FIELD_IS_DONE);
        db.execSQL(sql);

        // Log SQL string
        Log.i(TAG, sql);

        // db.close();
    }

    // Method to add a task to the database
    // Corresponds to an insert operation

    public void addTask(SQLiteDatabase db, Task task) {
        // Get data from Task object
        String description = task.getDescription();
        boolean isDone = task.isDone();
        // DO NOT grab the id (-1), database will assign it

        // Get a reference to the database (writable)
        //SQLiteDatabase db = getWritableDatabase();

        // ContentValues is key/value mapping
        ContentValues values = new ContentValues();
        // Let database assign the id
        values.put(FIELD_DESCRIPTION, description);
        values.put(FIELD_IS_DONE, isDone ? 1 : 0);

        // Insert ContentValues into Tasks table. Adds a new record.
        long id = db.insert(DATABASE_TABLE, null, values);

        // After adding the new Task, set its id to the one generated by the database
        task.setId(id);

    }

    // Method to update an existing task in database
    public void updateTask(Task task) {
        SQLiteDatabase db = getWritableDatabase();
        // TODO: check if isDone is being saved correctly
        ContentValues values = new ContentValues();
        values.put(FIELD_IS_DONE, task.isDone() ? 1 : 0);
        db.update(DATABASE_TABLE, values, "_id= ?", new String[] {String.valueOf(task.getId())});
        db.close();
    }

    // Method to get all tasks from existing database

    public List<Task> getAllTasks(SQLiteDatabase db) {
        // Instantiate empty list
        List<Task> allTasks = new ArrayList<>();

        // Fill list from database
        //SQLiteDatabase db = getReadableDatabase();

        // Query results in SQLite are called Cursor objects
        Cursor cursor = db.query(DATABASE_TABLE, new String[]{FIELD_PRIMARY_KEY, FIELD_DESCRIPTION,
        FIELD_IS_DONE}, null, null, null, null, null);

        /* Loop through the cursor results, one at a time.
         * Create Task objects and add them to the List.
         * First determine if there are results
         */

        if (cursor.moveToFirst())
        {
            do {
                Task task = new Task(cursor.getLong(0), cursor.getString(1),
                        cursor.getInt(2) == 1);
                allTasks.add(task);
            } while (cursor.moveToNext());
        }

        // close Cursor
        cursor.close();

        return allTasks;
    }

    // Clear all tasks
    public void clearAllTasks(SQLiteDatabase db) {
        //SQLiteDatabase db = getWritableDatabase();
        // Clears the Table
        db.delete(DATABASE_TABLE, null, null);
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {

    }
}
